#!/usr/bin/env python

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import unittest

from math import sqrt

def divisors(number):
    result = []
    sqrt_of_number = int(sqrt(number))
    for i in range(1, sqrt_of_number):
        if number % i == 0:
            result += [i, number / i]
    if number % sqrt_of_number == 0:
        result += [sqrt_of_number]
    return result

def triangle(number):
    return number * (number + 1) / 2

def answer(max_divisors):
    number = 1
    while len(divisors(triangle(number))) < max_divisors:
        number += 1
    return triangle(number)

class DivisorsTestCase(unittest.TestCase):
    def runTest(self):
        self.assertEqual(set([1, 2, 4, 7, 14, 28]), set(divisors(28)),
                'Divisors are calculated incorrectly')
        self.assertEqual(set([1, 3, 9]), set(divisors(9)),
                'Divisors are calculated incorrectly')

class TriangleTestCase(unittest.TestCase):
    def runTest(self):
        self.assertEqual(28, triangle(7),
                'Triangle number calculated incorrectly')

if __name__ == '__main__':
    #unittest.main()
    print(answer(500))

