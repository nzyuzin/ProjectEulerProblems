;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(define cache '())

(define (contains? l v)
  (if (null? l)
    #f
    (if (eq? (caar l) v)
      #t
      (contains? (cdr l) v))))

(define (get l v)
  (if (null? l)
    '()
    (if (eq? (caar l) v)
      (cdar l)
      (get (cdr l) v))))

(define (fib n)
  (define (inner-fib n)
    (if (> n 1)
      (+ (fib (- n 2)) (fib (- n 1)))
      (if (= n 1)
        1
        0)))
    (if (contains? cache n)
      (get cache n)
      (begin (set! cache (cons (cons n (inner-fib n)) cache)) (get cache n))))

(define (fib-sequence n)
  (define (inner-loop i)
    (if (> i n)
      '()
      (cons (fib i) (inner-loop (+ i 1)))))
  (inner-loop 0))

(define (even-fibs n)
  (filter (lambda (x) (= (remainder x 2) 0)) (fib-sequence n)))

(define answer-seq
  (filter (lambda (x) (> x 4000000)) (even-fibs 33)))

(define answer (fold-left + 0 answer-seq))
